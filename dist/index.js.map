{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 0c55b3506485996476c3","webpack:///./src/index.ts","webpack:///external \"angular\"","webpack:///./src/star-rating.controller.ts","webpack:///./src/star-rating.component.ts","webpack:///./src/star-rating.tpl.html","webpack:///external \"css-star-rating/dist/scss/star-rating.scss\"","webpack:///external \"css-star-rating/dist/images/star-rating.icons.svg\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","star_rating_controller_1","star_rating_component_1","star_rating_controller_2","StarRatingController","star_rating_component_2","StarRatingComponent","angularStars","angular","controller","component","name","require","this","classEmpty","DefaultClassEmpty","classHalf","DefaultClassHalf","classFilled","DefaultClassFilled","pathEmpty","DefaultSvgPathEmpty","pathHalf","DefaultSvgPathHalf","pathFilled","DefaultSvgPathFilled","_numOfStars","DefaultNumOfStars","_rating","stars","_getStarsArray","numOfStars","setColor","onClick","$event","onRatingChange","i","push","_getHalfStarVisible","rating","Math","abs","_getColor","staticColor","fractionSize","color","Object","defineProperty","prototype","get","set","value","enumerable","configurable","newRating","ratingAsInteger","parseInt","toString","setHalfStarVisible","_showHalfStars","_disabled","_readOnly","_space","_starType","DefaultStarType","_size","DefaultSize","_speed","DefaultSpeed","_labelPosition","DefaultLabelPosition","_staticColor","undefined","_labelText","_id","random","getColor","showHalfStars","getHalfStarVisible","halfStarVisible","$onChanges","changes","valueChanged","key","currentValue","previousValue","space","readOnly","disabled","labelText","size","speed","labelPosition","starType","onStarClicked","DefaultAssetsPath","DefaultSvgPath","DefaultSvgEmptySymbolId","DefaultSvgHalfSymbolId","DefaultSvgFilledSymbolId","starRatingTpl","bindings","labelVisible","replace","templateUrl","path","html","window","run","put"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t__webpack_require__(1);\r\n\tvar star_rating_controller_1 = __webpack_require__(2);\r\n\tvar star_rating_component_1 = __webpack_require__(3);\r\n\tvar styles = __webpack_require__(5);\r\n\tvar icons = __webpack_require__(6);\r\n\tvar styles = styles;\r\n\tvar icons = icons;\r\n\tvar star_rating_controller_2 = __webpack_require__(2);\r\n\texports.StarRatingController = star_rating_controller_2.StarRatingController;\r\n\tvar star_rating_component_2 = __webpack_require__(3);\r\n\texports.StarRatingComponent = star_rating_component_2.StarRatingComponent;\r\n\texports.angularStars = angular\r\n\t    .module('star-rating', [])\r\n\t    .controller('starRatingCtrl', star_rating_controller_1.StarRatingController)\r\n\t    .component('starRatingComp', new star_rating_component_1.StarRatingComponent())\r\n\t    .name;\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"angular\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar StarRatingController = (function () {\r\n\t    function StarRatingController() {\r\n\t        //set default ctrl props\r\n\t        this.classEmpty = StarRatingController.DefaultClassEmpty;\r\n\t        this.classHalf = StarRatingController.DefaultClassHalf;\r\n\t        this.classFilled = StarRatingController.DefaultClassFilled;\r\n\t        this.pathEmpty = StarRatingController.DefaultSvgPathEmpty;\r\n\t        this.pathHalf = StarRatingController.DefaultSvgPathHalf;\r\n\t        this.pathFilled = StarRatingController.DefaultSvgPathFilled;\r\n\t        //set default Component Inputs\r\n\t        this._numOfStars = StarRatingController.DefaultNumOfStars;\r\n\t        this._rating = 0;\r\n\t        this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n\t        this.setColor();\r\n\t        //set default Outputs\r\n\t        this.onClick = function ($event) {\r\n\t            return {};\r\n\t        };\r\n\t        this.onRatingChange = function ($event) {\r\n\t            return {};\r\n\t        };\r\n\t    }\r\n\t    /**\r\n\t     * _getStarsArray\r\n\t     *\r\n\t     * returns an array of increasing numbers starting at 1\r\n\t     *\r\n\t     * @param numOfStars\r\n\t     * @returns {Array}\r\n\t     */\r\n\t    StarRatingController._getStarsArray = function (numOfStars) {\r\n\t        var stars = [];\r\n\t        for (var i = 0; i < numOfStars; i++) {\r\n\t            stars.push(i + 1);\r\n\t        }\r\n\t        return stars;\r\n\t    };\r\n\t    /**\r\n\t     * _getHalfStarVisible\r\n\t     *\r\n\t     * Returns true if there should be a half star visible, and false if not.\r\n\t     *\r\n\t     * @param rating\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    StarRatingController._getHalfStarVisible = function (rating) {\r\n\t        return Math.abs(rating % 1) > 0;\r\n\t    };\r\n\t    /**\r\n\t     * _getColor\r\n\t     *\r\n\t     * The default function for color calculation\r\n\t     * based on the current rating and the the number of stars possible.\r\n\t     * If a staticColor is set the function will use it as return value.\r\n\t     *\r\n\t     * @param rating\r\n\t     * @param numOfStars\r\n\t     * @param staticColor\r\n\t     * @returns {starRatingColors}\r\n\t     */\r\n\t    StarRatingController._getColor = function (rating, numOfStars, staticColor) {\r\n\t        rating = rating || 0;\r\n\t        //if a fix color is set use this one\r\n\t        if (staticColor) {\r\n\t            return staticColor;\r\n\t        }\r\n\t        //calculate size of smallest fraction\r\n\t        var fractionSize = numOfStars / 3;\r\n\t        //apply color by fraction\r\n\t        var color = 'default';\r\n\t        if (rating > 0) {\r\n\t            color = 'negative';\r\n\t        }\r\n\t        if (rating > fractionSize) {\r\n\t            color = 'ok';\r\n\t        }\r\n\t        if (rating > fractionSize * 2) {\r\n\t            color = 'positive';\r\n\t        }\r\n\t        return color;\r\n\t    };\r\n\t    Object.defineProperty(StarRatingController.prototype, \"numOfStars\", {\r\n\t        get: function () {\r\n\t            return this._numOfStars;\r\n\t        },\r\n\t        //getter and setter\r\n\t        set: function (value) {\r\n\t            this._numOfStars = (value > 0) ? value : StarRatingController.DefaultNumOfStars;\r\n\t            //update stars array\r\n\t            this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n\t            //update color\r\n\t            this.setColor();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"rating\", {\r\n\t        get: function () {\r\n\t            return this._rating;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            //validate and apply newRating\r\n\t            var newRating = 0;\r\n\t            if (value >= 0\r\n\t                && value <= this.numOfStars) {\r\n\t                newRating = value;\r\n\t            }\r\n\t            //limit max value to max number of stars\r\n\t            if (value > this.numOfStars) {\r\n\t                newRating = this.numOfStars;\r\n\t            }\r\n\t            this._rating = newRating;\r\n\t            //update ratingAsInteger. rating parsed to int for the value-[n] modifier\r\n\t            this.ratingAsInteger = parseInt(this._rating.toString());\r\n\t            //update halfStarsVisible\r\n\t            this.setHalfStarVisible();\r\n\t            //update calculated Color\r\n\t            this.setColor();\r\n\t            //fire onRatingChange event\r\n\t            var $event = { rating: this._rating };\r\n\t            if (typeof this.onRatingChange === 'function') {\r\n\t                this.onRatingChange({ $event: $event });\r\n\t            }\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"showHalfStars\", {\r\n\t        get: function () {\r\n\t            return this._showHalfStars;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._showHalfStars = !!value;\r\n\t            //update halfStarVisible\r\n\t            this.setHalfStarVisible();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"disabled\", {\r\n\t        get: function () {\r\n\t            return this._disabled;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._disabled = !!value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"readOnly\", {\r\n\t        get: function () {\r\n\t            return this._readOnly;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._readOnly = !!value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"space\", {\r\n\t        get: function () {\r\n\t            return this._space;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._space = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"starType\", {\r\n\t        get: function () {\r\n\t            return this._starType;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._starType = value || StarRatingController.DefaultStarType;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"size\", {\r\n\t        get: function () {\r\n\t            return this._size;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._size = value || StarRatingController.DefaultSize;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"speed\", {\r\n\t        get: function () {\r\n\t            return this._speed;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._speed = value || StarRatingController.DefaultSpeed;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"labelPosition\", {\r\n\t        get: function () {\r\n\t            return this._labelPosition;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._labelPosition = value || StarRatingController.DefaultLabelPosition;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"staticColor\", {\r\n\t        get: function () {\r\n\t            return this._staticColor;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._staticColor = value || undefined;\r\n\t            //update color.\r\n\t            this.setColor();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"labelText\", {\r\n\t        get: function () {\r\n\t            return this._labelText;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._labelText = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"id\", {\r\n\t        get: function () {\r\n\t            return this._id;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._id = value || (Math.random() * 10000).toString();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    StarRatingController.prototype.setColor = function () {\r\n\t        //check if custom function is given\r\n\t        if (typeof this.getColor === \"function\") {\r\n\t            this.color = this.getColor(this.rating, this.numOfStars, this.staticColor);\r\n\t        }\r\n\t        else {\r\n\t            this.color = StarRatingController._getColor(this.rating, this.numOfStars, this.staticColor);\r\n\t        }\r\n\t    };\r\n\t    StarRatingController.prototype.setHalfStarVisible = function () {\r\n\t        //update halfStarVisible\r\n\t        if (this.showHalfStars) {\r\n\t            //check if custom function is given\r\n\t            if (typeof this.getHalfStarVisible === \"function\") {\r\n\t                this.halfStarVisible = this.getHalfStarVisible(this.rating);\r\n\t            }\r\n\t            else {\r\n\t                this.halfStarVisible = StarRatingController._getHalfStarVisible(this.rating);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            this.halfStarVisible = false;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * $onChanges\r\n\t     *\r\n\t     * The components $onChange hook\r\n\t     *\r\n\t     * @param changes\r\n\t     */\r\n\t    StarRatingController.prototype.$onChanges = function (changes) {\r\n\t        var valueChanged = function (key, changes) {\r\n\t            if (key in changes) {\r\n\t                if (\r\n\t                //(changes[key].previousValue != 'UNINITIALIZED_VALUE' && changes[key].currentValue !== undefined)\r\n\t                changes[key].currentValue != changes[key].previousValue) {\r\n\t                    return true;\r\n\t                }\r\n\t            }\r\n\t            return false;\r\n\t        };\r\n\t        //---------------------------------------\r\n\t        //functions\r\n\t        //@Notice For some reason callback functions is not defined even there are defaults in the constructor\r\n\t        if (valueChanged('getColor', changes)) {\r\n\t            this.getColor = changes.getColor.currentValue;\r\n\t            this.setColor();\r\n\t        }\r\n\t        if (valueChanged('getHalfStarVisible', changes)) {\r\n\t            this.getHalfStarVisible = changes.getHalfStarVisible.currentValue;\r\n\t            this.setHalfStarVisible();\r\n\t        }\r\n\t        //boolean\r\n\t        if (valueChanged('showHalfStars', changes)) {\r\n\t            this.showHalfStars = changes.showHalfStars.currentValue;\r\n\t        }\r\n\t        if (valueChanged('space', changes)) {\r\n\t            this.space = changes.space.currentValue;\r\n\t        }\r\n\t        if (valueChanged('readOnly', changes)) {\r\n\t            this.readOnly = changes.readOnly.currentValue;\r\n\t        }\r\n\t        if (valueChanged('disabled', changes)) {\r\n\t            this.disabled = !!changes.disabled.currentValue;\r\n\t        }\r\n\t        //number\r\n\t        if (valueChanged('rating', changes)) {\r\n\t            this.rating = changes.rating.currentValue;\r\n\t        }\r\n\t        if (valueChanged('numOfStars', changes)) {\r\n\t            this.numOfStars = changes.numOfStars.currentValue;\r\n\t        }\r\n\t        //string\r\n\t        if (valueChanged('labelText', changes)) {\r\n\t            this.labelText = changes.labelText.currentValue;\r\n\t        }\r\n\t        if (valueChanged('staticColor', changes)) {\r\n\t            this.staticColor = changes.staticColor.currentValue;\r\n\t        }\r\n\t        if (valueChanged('size', changes)) {\r\n\t            this.size = changes.size.currentValue;\r\n\t        }\r\n\t        if (valueChanged('speed', changes)) {\r\n\t            this.speed = changes.speed.currentValue;\r\n\t        }\r\n\t        if (valueChanged('labelPosition', changes)) {\r\n\t            this.labelPosition = changes.labelPosition.currentValue;\r\n\t        }\r\n\t        if (valueChanged('starType', changes)) {\r\n\t            this.starType = changes.starType.currentValue;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * onStarClicked\r\n\t     *\r\n\t     * Is fired when a star is clicked. And updated the rating value.\r\n\t     * This function returns if the disabled or readOnly\r\n\t     * property is set. If provided it emits the onClick event\r\n\t     * handler with the actual rating value.\r\n\t     *\r\n\t     * @param rating\r\n\t     */\r\n\t    StarRatingController.prototype.onStarClicked = function (rating) {\r\n\t        if (this.readOnly || this.disabled) {\r\n\t            return;\r\n\t        }\r\n\t        this.rating = rating;\r\n\t        //fire onClick event\r\n\t        var $event = { rating: rating };\r\n\t        if (typeof this.onClick === 'function') {\r\n\t            this.onClick({ $event: $event });\r\n\t        }\r\n\t    };\r\n\t    return StarRatingController;\r\n\t}());\r\n\texports.StarRatingController = StarRatingController;\r\n\tStarRatingController.DefaultClassEmpty = \"default-star-empty-icon\";\r\n\tStarRatingController.DefaultClassHalf = \"default-star-half-icon\";\r\n\tStarRatingController.DefaultClassFilled = \"default-star-filled-icon\";\r\n\tStarRatingController.DefaultNumOfStars = 5;\r\n\tStarRatingController.DefaultSize = \"medium\";\r\n\tStarRatingController.DefaultSpeed = \"noticeable\";\r\n\tStarRatingController.DefaultLabelPosition = \"left\";\r\n\tStarRatingController.DefaultStarType = \"svg\";\r\n\tStarRatingController.DefaultAssetsPath = \"assets/images/\";\r\n\tStarRatingController.DefaultSvgPath = StarRatingController.DefaultAssetsPath + \"star-rating.icons.svg\";\r\n\tStarRatingController.DefaultSvgEmptySymbolId = \"star-empty\";\r\n\tStarRatingController.DefaultSvgHalfSymbolId = \"star-half\";\r\n\tStarRatingController.DefaultSvgFilledSymbolId = \"star-filled\";\r\n\tStarRatingController.DefaultSvgPathEmpty = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgEmptySymbolId;\r\n\tStarRatingController.DefaultSvgPathHalf = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgHalfSymbolId;\r\n\tStarRatingController.DefaultSvgPathFilled = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgFilledSymbolId;\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar star_rating_controller_1 = __webpack_require__(2);\r\n\tvar starRatingTpl = __webpack_require__(4);\r\n\tvar StarRatingComponent = (function () {\r\n\t    function StarRatingComponent() {\r\n\t        this.bindings = {\r\n\t            id: '<',\r\n\t            rating: '<',\r\n\t            showHalfStars: '<',\r\n\t            numOfStars: '<',\r\n\t            size: '<',\r\n\t            space: '<',\r\n\t            staticColor: '<',\r\n\t            disabled: '<',\r\n\t            starType: '<',\r\n\t            labelText: '<',\r\n\t            labelVisible: '<',\r\n\t            labelPosition: '<',\r\n\t            speed: '<',\r\n\t            readOnly: '<',\r\n\t            getColor: '<',\r\n\t            getHalfStarVisible: '<',\r\n\t            onClick: '&?',\r\n\t            onRatingChange: '&?'\r\n\t        };\r\n\t        this.replace = true;\r\n\t        this.controller = star_rating_controller_1.StarRatingController;\r\n\t        this.templateUrl = starRatingTpl;\r\n\t    }\r\n\t    return StarRatingComponent;\r\n\t}());\r\n\texports.StarRatingComponent = StarRatingComponent;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tvar path = 'src/star-rating.tpl.html';\n\tvar html = \"<div id={{$ctrl.id}} class=\\\"rating {{$ctrl.rating?'value-'+$ctrl.ratingAsInteger:'value-0'}} {{$ctrl.halfStarVisible?'half':''}} {{$ctrl.space?'space-'+$ctrl.space:''}} {{$ctrl.labelVisible?'label-'+$ctrl.labelVisible:''}} {{$ctrl.labelPosition?'label-'+$ctrl.labelPosition:''}} {{$ctrl.color?'color-'+$ctrl.color:''}} {{$ctrl.starType?'star-'+$ctrl.starType:''}} {{$ctrl.speed}} {{$ctrl.size}}\\\" ng-class=\\\"{'read-only':$ctrl.readOnly, 'disabled':$ctrl.disabled}\\\"> <div ng-show=$ctrl.labelText class=label-value>{{$ctrl.labelText}}</div> <div class=star-container> <div class=star ng-repeat=\\\"star in $ctrl.stars track by $index\\\" ng-click=$ctrl.onStarClicked(star)> <i class=\\\"star-empty {{$ctrl.classEmpty}}\\\"></i> <i class=\\\"star-half {{$ctrl.classHalf}}\\\"></i> <i class=\\\"star-filled {{$ctrl.classFilled}}\\\"></i> <svg class=\\\"star-empty {{$ctrl.classEmpty}}\\\"> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathEmpty}}></use> </svg> <svg class=\\\"star-half {{$ctrl.classHalf}}\\\"> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathHalf}}></use> </svg> <svg class=\\\"star-filled {{$ctrl.classFilled}}\\\"> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathFilled}}></use> </svg> </div> </div> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"css-star-rating/dist/scss/star-rating.scss\");\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"css-star-rating/dist/images/star-rating.icons.svg\");\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0c55b3506485996476c3","import \"angular\";\r\n\r\nimport {StarRatingController} from \"./star-rating.controller\";\r\nimport {StarRatingComponent} from \"./star-rating.component\";\r\n\r\nimport styles = require('css-star-rating/dist/scss/star-rating.scss');\r\nimport icons = require('css-star-rating/dist/images/star-rating.icons.svg');\r\nlet styles = styles;\r\nlet icons = icons;\r\n\r\nexport {\r\n      starRatingSizes\r\n    , starRatingColors\r\n    , starRatingSpeed\r\n    , starRatingPosition\r\n    , starRatingStarTypes\r\n    , starRatingStarSpace\r\n    , IStarRatingCompBindings\r\n    , IStarRatingOnClickEvent\r\n    , IStarRatingOnUpdateEvent\r\n} from \"./star-rating.structs\"\r\nexport {StarRatingController} from \"./star-rating.controller\";\r\nexport {StarRatingComponent} from \"./star-rating.component\";\r\n\r\nexport const angularStars = angular\r\n    .module('star-rating', [])\r\n    .controller('starRatingCtrl', StarRatingController)\r\n    .component('starRatingComp', new StarRatingComponent())\r\n    .name;\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","module.exports = require(\"angular\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 1\n// module chunks = 0","import {\r\n    IStarRatingCompBindings\r\n    ,starRatingSizes\r\n    , starRatingSpeed\r\n    , starRatingPosition\r\n    , starRatingStarTypes\r\n    , starRatingColors\r\n    , starRatingStarSpace\r\n    , IStarRatingOnClickEvent\r\n    , IStarRatingOnUpdateEvent\r\n} from \"star-rating.structs\"\r\n\r\nimport IChangesObject = ng.IChanges;\r\n\r\nexport class StarRatingController implements ng.IComponentController, IStarRatingCompBindings {\r\n\r\n    static DefaultClassEmpty: string = \"default-star-empty-icon\";\r\n\r\n    static DefaultClassHalf: string = \"default-star-half-icon\";\r\n\r\n    static DefaultClassFilled: string = \"default-star-filled-icon\";\r\n\r\n    static DefaultNumOfStars: number = 5;\r\n\r\n    static DefaultSize: starRatingSizes = \"medium\";\r\n\r\n    static DefaultSpeed: starRatingSpeed = \"noticeable\";\r\n\r\n    static DefaultLabelPosition: starRatingPosition = \"left\";\r\n\r\n    static DefaultStarType: starRatingStarTypes = \"svg\";\r\n\r\n    static DefaultAssetsPath: string = \"assets/images/\";\r\n\r\n    static DefaultSvgPath: string = StarRatingController.DefaultAssetsPath + \"star-rating.icons.svg\";\r\n    static DefaultSvgEmptySymbolId: string = \"star-empty\";\r\n    static DefaultSvgHalfSymbolId: string = \"star-half\";\r\n    static DefaultSvgFilledSymbolId: string = \"star-filled\";\r\n\r\n    static DefaultSvgPathEmpty: string = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgEmptySymbolId;\r\n\r\n    static DefaultSvgPathHalf: string = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgHalfSymbolId;\r\n\r\n    static DefaultSvgPathFilled: string = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgFilledSymbolId;\r\n\r\n\r\n    /**\r\n     * _getStarsArray\r\n     *\r\n     * returns an array of increasing numbers starting at 1\r\n     *\r\n     * @param numOfStars\r\n     * @returns {Array}\r\n     */\r\n    static _getStarsArray(numOfStars: number): Array<number> {\r\n        let stars = [];\r\n        for (let i = 0; i < numOfStars; i++) {\r\n            stars.push(i + 1);\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    /**\r\n     * _getHalfStarVisible\r\n     *\r\n     * Returns true if there should be a half star visible, and false if not.\r\n     *\r\n     * @param rating\r\n     * @returns {boolean}\r\n     */\r\n    static _getHalfStarVisible(rating: number): boolean {\r\n        return Math.abs(rating % 1) > 0;\r\n    }\r\n\r\n    /**\r\n     * _getColor\r\n     *\r\n     * The default function for color calculation\r\n     * based on the current rating and the the number of stars possible.\r\n     * If a staticColor is set the function will use it as return value.\r\n     *\r\n     * @param rating\r\n     * @param numOfStars\r\n     * @param staticColor\r\n     * @returns {starRatingColors}\r\n     */\r\n    static _getColor(rating: number, numOfStars: number, staticColor?: starRatingColors): starRatingColors {\r\n        rating = rating || 0;\r\n\r\n        //if a fix color is set use this one\r\n        if (staticColor) {\r\n            return staticColor;\r\n        }\r\n\r\n        //calculate size of smallest fraction\r\n        let fractionSize = numOfStars / 3;\r\n\r\n        //apply color by fraction\r\n        let color: starRatingColors = 'default';\r\n        if (rating > 0) {\r\n            color = 'negative';\r\n        }\r\n        if (rating > fractionSize) {\r\n            color = 'ok';\r\n        }\r\n        if (rating > fractionSize * 2) {\r\n            color = 'positive';\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n\r\n    //bindings\r\n\r\n    //inputs\r\n    protected _id: string;\r\n    protected _labelText: string;\r\n    protected _staticColor: starRatingColors;\r\n    protected _labelPosition: starRatingPosition;\r\n    protected _speed: starRatingSpeed;\r\n    protected _size: starRatingSizes;\r\n    protected _starType: starRatingStarTypes;\r\n    protected _space: starRatingStarSpace;\r\n    protected _readOnly: boolean;\r\n    protected _disabled: boolean;\r\n    protected _showHalfStars: boolean;\r\n    protected _rating: number;\r\n    protected _numOfStars: number;\r\n    getHalfStarVisible: (rating: number) => boolean;\r\n    getColor: (rating: number, numOfStars: number, staticColor?: starRatingColors) => starRatingColors;\r\n\r\n    //outputs\r\n    onClick?: ($event: any) =>  IStarRatingOnClickEvent;\r\n    onRatingChange?: ($event: any) => IStarRatingOnUpdateEvent;\r\n\r\n    //ctrl only\r\n    classEmpty: string;\r\n    classHalf: string;\r\n    classFilled: string;\r\n\r\n    pathEmpty: string;\r\n    pathHalf: string;\r\n    pathFilled: string;\r\n\r\n    color: starRatingColors;\r\n    stars: Array<number>;\r\n    ratingAsInteger: number;\r\n    halfStarVisible: boolean;\r\n\r\n    //getter and setter\r\n    set numOfStars(value: number) {\r\n        this._numOfStars = (value > 0)?value:StarRatingController.DefaultNumOfStars;\r\n\r\n        //update stars array\r\n        this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n\r\n        //update color\r\n        this.setColor();\r\n    }\r\n    get numOfStars(): number {\r\n        return this._numOfStars;\r\n    }\r\n\r\n    set rating(value: number) {\r\n        //validate and apply newRating\r\n        let newRating:number = 0;\r\n        if( value >= 0\r\n            && value <= this.numOfStars) {\r\n            newRating = value;\r\n        }\r\n        //limit max value to max number of stars\r\n        if(value > this.numOfStars) {\r\n            newRating = this.numOfStars;\r\n        }\r\n        this._rating = newRating;\r\n\r\n        //update ratingAsInteger. rating parsed to int for the value-[n] modifier\r\n        this.ratingAsInteger = parseInt(this._rating.toString());\r\n\r\n        //update halfStarsVisible\r\n        this.setHalfStarVisible();\r\n\r\n        //update calculated Color\r\n        this.setColor();\r\n\r\n        //fire onRatingChange event\r\n        let $event:IStarRatingOnUpdateEvent = {rating: this._rating};\r\n        if(typeof this.onRatingChange === 'function') {\r\n            this.onRatingChange({$event:$event});\r\n        }\r\n    }\r\n    get rating(): number {\r\n        return this._rating;\r\n    }\r\n\r\n    set showHalfStars(value: boolean) {\r\n        this._showHalfStars = !!value;\r\n        //update halfStarVisible\r\n        this.setHalfStarVisible();\r\n    }\r\n    get showHalfStars(): boolean {\r\n        return this._showHalfStars;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = !!value;\r\n    }\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    set readOnly(value: boolean) {\r\n        this._readOnly = !!value;\r\n    }\r\n    get readOnly(): boolean {\r\n        return this._readOnly;\r\n    }\r\n\r\n    set space(value: starRatingStarSpace) {\r\n        this._space = value;\r\n    }\r\n    get space(): starRatingStarSpace {\r\n        return this._space;\r\n    }\r\n\r\n    set starType(value: starRatingStarTypes) {\r\n        this._starType = value || StarRatingController.DefaultStarType;\r\n    }\r\n    get starType(): starRatingStarTypes {\r\n        return this._starType;\r\n    }\r\n\r\n    set size(value: starRatingSizes) {\r\n        this._size = value || StarRatingController.DefaultSize;\r\n    }\r\n    get size(): starRatingSizes {\r\n        return this._size;\r\n    }\r\n\r\n    set speed(value: starRatingSpeed) {\r\n        this._speed = value || StarRatingController.DefaultSpeed;\r\n    }\r\n    get speed(): starRatingSpeed {\r\n        return this._speed;\r\n    }\r\n\r\n    set labelPosition(value: starRatingPosition) {\r\n        this._labelPosition = value || StarRatingController.DefaultLabelPosition;\r\n    }\r\n    get labelPosition(): starRatingPosition {\r\n        return this._labelPosition;\r\n    }\r\n\r\n    set staticColor(value: starRatingColors) {\r\n        this._staticColor = value || undefined;\r\n\r\n        //update color.\r\n        this.setColor();\r\n    }\r\n    get staticColor(): starRatingColors {\r\n        return this._staticColor;\r\n    }\r\n\r\n    set labelText(value: string) {\r\n        this._labelText = value;\r\n    }\r\n    get labelText(): string {\r\n        return this._labelText;\r\n    }\r\n\r\n    set id(value: string) {\r\n        this._id = value || (Math.random() * 10000).toString();\r\n    }\r\n    get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    setColor() {\r\n        //check if custom function is given\r\n        if(typeof this.getColor === \"function\") {\r\n            this.color = this.getColor(this.rating, this.numOfStars, this.staticColor);\r\n        }\r\n        else {\r\n            this.color = StarRatingController._getColor(this.rating, this.numOfStars, this.staticColor);\r\n        }\r\n    }\r\n\r\n    setHalfStarVisible() {\r\n        //update halfStarVisible\r\n        if(this.showHalfStars) {\r\n\r\n            //check if custom function is given\r\n            if(typeof this.getHalfStarVisible === \"function\") {\r\n                this.halfStarVisible = this.getHalfStarVisible(this.rating);\r\n            } else {\r\n                this.halfStarVisible = StarRatingController._getHalfStarVisible(this.rating);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.halfStarVisible = false;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        //set default ctrl props\r\n        this.classEmpty = StarRatingController.DefaultClassEmpty;\r\n        this.classHalf = StarRatingController.DefaultClassHalf;\r\n        this.classFilled = StarRatingController.DefaultClassFilled;\r\n        this.pathEmpty = StarRatingController.DefaultSvgPathEmpty;\r\n        this.pathHalf = StarRatingController.DefaultSvgPathHalf;\r\n        this.pathFilled = StarRatingController.DefaultSvgPathFilled;\r\n\r\n        //set default Component Inputs\r\n        this._numOfStars = StarRatingController.DefaultNumOfStars;\r\n        this._rating = 0;\r\n        this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n        this.setColor();\r\n\r\n        //set default Outputs\r\n        this.onClick = function ($event: IStarRatingOnClickEvent) {\r\n            return <IStarRatingOnClickEvent>{}\r\n        };\r\n        this.onRatingChange = function ($event: IStarRatingOnUpdateEvent) {\r\n            return <IStarRatingOnUpdateEvent>{}\r\n        };\r\n    }\r\n\r\n    /**\r\n     * $onChanges\r\n     *\r\n     * The components $onChange hook\r\n     *\r\n     * @param changes\r\n     */\r\n    $onChanges(changes): void {\r\n        let valueChanged = function (key: string, changes): boolean {\r\n            if (key in changes) {\r\n                if (\r\n                    //(changes[key].previousValue != 'UNINITIALIZED_VALUE' && changes[key].currentValue !== undefined)\r\n                     changes[key].currentValue != changes[key].previousValue) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        //---------------------------------------\r\n\r\n        //functions\r\n        //@Notice For some reason callback functions is not defined even there are defaults in the constructor\r\n        if (valueChanged('getColor', changes)) {\r\n            this.getColor = changes.getColor.currentValue;\r\n            this.setColor();\r\n        }\r\n\r\n        if (valueChanged('getHalfStarVisible', changes)) {\r\n            this.getHalfStarVisible = changes.getHalfStarVisible.currentValue;\r\n            this.setHalfStarVisible();\r\n        }\r\n\r\n        //boolean\r\n        if (valueChanged('showHalfStars', changes)) {\r\n            this.showHalfStars = changes.showHalfStars.currentValue;\r\n        }\r\n\r\n        if (valueChanged('space', changes)) {\r\n            this.space = changes.space.currentValue;\r\n        }\r\n\r\n        if (valueChanged('readOnly', changes)) {\r\n            this.readOnly = changes.readOnly.currentValue;\r\n        }\r\n\r\n        if (valueChanged('disabled', changes)) {\r\n            this.disabled = !!changes.disabled.currentValue;\r\n        }\r\n\r\n        //number\r\n        if (valueChanged('rating', changes)) {\r\n            this.rating = changes.rating.currentValue;\r\n        }\r\n\r\n        if (valueChanged('numOfStars', changes)) {\r\n            this.numOfStars = changes.numOfStars.currentValue;\r\n        }\r\n\r\n        //string\r\n        if (valueChanged('labelText', changes)) {\r\n            this.labelText = changes.labelText.currentValue;\r\n        }\r\n\r\n        if (valueChanged('staticColor', changes)) {\r\n            this.staticColor = changes.staticColor.currentValue;\r\n        }\r\n\r\n        if (valueChanged('size', changes)) {\r\n            this.size = changes.size.currentValue;\r\n        }\r\n\r\n        if (valueChanged('speed', changes)) {\r\n            this.speed = changes.speed.currentValue;\r\n        }\r\n\r\n        if (valueChanged('labelPosition', changes)) {\r\n            this.labelPosition = changes.labelPosition.currentValue;\r\n        }\r\n\r\n        if (valueChanged('starType', changes)) {\r\n            this.starType = changes.starType.currentValue;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * onStarClicked\r\n     *\r\n     * Is fired when a star is clicked. And updated the rating value.\r\n     * This function returns if the disabled or readOnly\r\n     * property is set. If provided it emits the onClick event\r\n     * handler with the actual rating value.\r\n     *\r\n     * @param rating\r\n     */\r\n    protected onStarClicked(rating: number): void {\r\n        if (this.readOnly || this.disabled) {\r\n            return;\r\n        }\r\n\r\n        this.rating = rating;\r\n\r\n        //fire onClick event\r\n        let $event:IStarRatingOnClickEvent = {rating: rating};\r\n        if(typeof this.onClick === 'function') {\r\n            this.onClick({$event:$event});\r\n        }\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/star-rating.controller.ts","import {StarRatingController} from \"./star-rating.controller\";\r\nimport starRatingTpl = require('./star-rating.tpl.html');\r\n\r\nexport class StarRatingComponent implements ng.IComponentOptions {\r\n\r\n    public bindings: any;\r\n    public controller: any;\r\n    public templateUrl: string;\r\n    public replace: boolean;\r\n\r\n    constructor() {\r\n        this.bindings = {\r\n              id: '<'\r\n            , rating: '<'\r\n            , showHalfStars: '<'\r\n            , numOfStars: '<'\r\n            , size: '<'\r\n            , space: '<'\r\n            , staticColor: '<'\r\n            , disabled: '<'\r\n            , starType: '<'\r\n            , labelText: '<'\r\n            , labelVisible: '<'\r\n            , labelPosition: '<'\r\n            , speed : '<'\r\n            , readOnly: '<'\r\n            , getColor: '<'\r\n            , getHalfStarVisible: '<'\r\n\r\n            , onClick: '&?'\r\n            , onRatingChange: '&?'\r\n        };\r\n        this.replace = true;\r\n        this.controller = StarRatingController;\r\n        this.templateUrl = <string>starRatingTpl;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/star-rating.component.ts","var path = 'src/star-rating.tpl.html';\nvar html = \"<div id={{$ctrl.id}} class=\\\"rating {{$ctrl.rating?'value-'+$ctrl.ratingAsInteger:'value-0'}} {{$ctrl.halfStarVisible?'half':''}} {{$ctrl.space?'space-'+$ctrl.space:''}} {{$ctrl.labelVisible?'label-'+$ctrl.labelVisible:''}} {{$ctrl.labelPosition?'label-'+$ctrl.labelPosition:''}} {{$ctrl.color?'color-'+$ctrl.color:''}} {{$ctrl.starType?'star-'+$ctrl.starType:''}} {{$ctrl.speed}} {{$ctrl.size}}\\\" ng-class=\\\"{'read-only':$ctrl.readOnly, 'disabled':$ctrl.disabled}\\\"> <div ng-show=$ctrl.labelText class=label-value>{{$ctrl.labelText}}</div> <div class=star-container> <div class=star ng-repeat=\\\"star in $ctrl.stars track by $index\\\" ng-click=$ctrl.onStarClicked(star)> <i class=\\\"star-empty {{$ctrl.classEmpty}}\\\"></i> <i class=\\\"star-half {{$ctrl.classHalf}}\\\"></i> <i class=\\\"star-filled {{$ctrl.classFilled}}\\\"></i> <svg class=\\\"star-empty {{$ctrl.classEmpty}}\\\"> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathEmpty}}></use> </svg> <svg class=\\\"star-half {{$ctrl.classHalf}}\\\"> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathHalf}}></use> </svg> <svg class=\\\"star-filled {{$ctrl.classFilled}}\\\"> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathFilled}}></use> </svg> </div> </div> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/star-rating.tpl.html\n// module id = 4\n// module chunks = 0","module.exports = require(\"css-star-rating/dist/scss/star-rating.scss\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"css-star-rating/dist/scss/star-rating.scss\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"css-star-rating/dist/images/star-rating.icons.svg\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"css-star-rating/dist/images/star-rating.icons.svg\"\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}